env:
  browser: true
  es2021: true
  node: true

parser: "@typescript-eslint/parser" # Specifies the parser for TypeScript

parserOptions:
  ecmaVersion: latest # Use the latest ECMAScript standard
  sourceType: "module" # Enables ES6 module features
  ecmaFeatures:
    jsx: true # Enables JSX since we're using React

settings:
  react:
    version: "detect" # Automatically detects the React version

extends:
  - "eslint:recommended" # Use the recommended rules from ESLint
  - "plugin:@typescript-eslint/recommended" # Use the recommended rules from the @typescript-eslint/eslint-plugin
  - "plugin:react/recommended" # Use the recommended rules from eslint-plugin-react
  - "plugin:react-hooks/recommended" # Ensures that hooks are used correctly
  - "plugin:prettier/recommended" # Enables eslint-plugin-prettier and displays prettier errors as ESLint errors

plugins:
  - "@typescript-eslint" # Adds the TypeScript plugin
  - "react" # Adds React specific linting rules
  - "react-hooks" # Adds rules for React hooks
  - "prettier" # Runs Prettier as an ESLint rule

rules:
  prettier/prettier: "error" # Ensures that prettier errors are shown as ESLint errors
  react/react-in-jsx-scope: "off" # For React 17+ you do not need to import React when using JSX
  react/prop-types: "off" # Disables prop-types rules, as we use TypeScript for type checking
  "@typescript-eslint/explicit-module-boundary-types": "off" # Disables the need to define return types
  "@typescript-eslint/no-unused-vars": ["error", { argsIgnorePattern: "^_" }] # Allows unused variables that are prefixed with an underscore
  "@typescript-eslint/no-explicit-any": "off" # Disables the rule for using 'any' type
  "no-console": ["warn", { allow: ["warn", "error"] }] # Warns about console.log usage, allows console.warn and console.error

ignorePatterns:
  - "node_modules/" # Ignore all files within node_modules
  - ".next/" # Ignore all files within .next (Next.js build folder)
  - "out/" # Ignore all files within out (Next.js export folder)
